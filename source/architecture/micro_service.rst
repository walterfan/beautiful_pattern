###################
微服务架构
###################

.. contents::
   :local:


概述
===================



亚马逊的架构规定
====================

* 所有团队的程序模块都要通过 Service Interface 方式将其数据与功能开放出来。
* 团队间程序模块的信息通信，都要通过这些接口。
* 除此之外没有其它的通信方式。其他形式一概不允许：
   - 不能直接链结别的程序（把其他团队的程序当做动态链接库来链接），
   - 不能直接读取其他团队的数据库，
   - 不能使用共享内存模式，
   - 不能使用别人模块的后门，等等。
   - 唯一允许的通信方式是调用 Service Interface。
* 任何技术都可以使用。比如：HTTP、CORBA、Pub/Sub、自定义的网络协议等。
* 所有的 Service Interface，毫无例外，都必须从骨子里到表面上设计成能对外界开放的。也就是说，团队必须做好规划与设计，以便未来把接口开放给全世界的程序员，没有任何例外。
* 不这样做的人会被炒鱿鱼。



主要组件
-------------------

1. provider

2. consumer

3. registry

4. monitor

SPI
---------------------

Service Provider Interface

每一层都向上提供 SPI 接口，每一层都是组件化，并可以灵活替换的

对外的交互可以用 Proxy ，使得远程调用看起来就象是本地调用。
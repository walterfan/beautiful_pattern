#####################
微服务之性能测试
#####################


为什么要做性能测试
==============================

性能测试顾名思义是测试和度量软件的运行性能的，无论是一个函数，一个类，一个模块还是一个服务都需要能明确清晰地知道它的性能如何。对于单个函数或单个类，性能测试比较容易，对其进行计时，做多轮不同压力下的测试，基本上就可以得出其性能指标。而对个整个服务及系统，性能测试就就没那么简单了，

在微服务大行其道的今天，性能测试和度量愈发重要，我们的整个系统都是由许多微服务在一起共同协作，提供给用户所需的服务。微服务的数量这么多，彼此之间或多或少都存在着依赖关系，性能问题往往会存在着传导和放大效应，牵一发而动全身。因此每个微服务都需要提供自己的服务级别协议 SLA(Service Level Agreement)，保证自己的服务在约定的负载压力之下的高可用和高性能，这样通过强大的度量监控系统，我们就能了解系统处于什么样的压力水下之下，发生性能问题时如何排查，如何进行垂直扩展 (scale up) 和水平扩展（scale out）。

在软件开发领域，有这样三句话深入人心:

 * 不能度量就不能管理  (If you can’t measure it, you can’t manage it)
 * 不能度量就不能证明  (If you can’t measure it, you can’t prove it)
 * 不能度量就不能提高  ( If you can’t measure it, you can’t improve it)

今天你告诉老板你做的微服务又快又好，老板一定会问你怎么证明？ 明天你又告诉老板，你做了一个重大的优化，将系统的性能大大地提高了，老板还是会问你，怎么证明性能提高了？提高了多少？ 这时候你就可以很自豪地拿出性能测试报告，告诉老板通过怎样的辛苦工作，达到了怎样的性能目标，各种性能指标的数据对比和图表一目了然，清清楚楚，老板定会心服口服，为你在功劳簿上记上一笔，之后的升职加薪自然指日可待。



性能测试要点
==============================

性能测试的目的是为了搞明白系统及服务的如下三个问题:

* 其所能承受的最大负载是多少，
* 有无性能瓶颈？
* 如果有性能瓶颈，瓶颈在哪里？

最重要的性能指标有三点：

* 1）响应时间
* 2）吞吐量
* 3）成功率

.. math::

   吞吐量=\frac{1s}{响应时间}

对于整个系统和服务和性能测试要点，我们要从以下 3 个层面进行考量：


1. 协议层面的考量
-----------------------------------------
以最常用的 HTTP 协议， 我们要看如下要点：

1) 响应码(Response code)

响应码代表了 HTTP REST API 的响应成功与否，错误类型是什么, 其中5xx 的响应码是需要重点注意, 密切观察产线上出现的错误

2) 响应时间(ResponseTime)

响应时间是衡量 REST API 性能的重要指标, 基于它我们可以知道微服务可以在多长时间内响应, 通常我们需要知道最大值max, 平均值average 和P99 (百分之99的请求的响应时间) 值

3) 请求次数(Request volume)

请求次数也就是请求数量的多少, 绝对数量意义不大, 单位时间内的请求数量更有意义.

4) HTTP 请求的频率(Request frequency)

常用度量指标有QPS (Query Per Second) 或 TPS (Transaction Per Second)

5) 应用程序性能指标 (APDEX)

.. math::

    APDEX=\frac{满意的请求数 + \frac{可容忍的请求数}{2}}{全部的请求数}

假设响应时间在T秒之内是令人满意的，在 F 秒之外是令人沮丧的

  * 1）  满意的 satistifed

这代表响应时间小于设定的阈值（T秒），用户感觉满意。

  * 2） 可容忍的 tolerating

这代表响应时间大于T秒 并小于F秒，性能不佳但是还可以继续使用，用户感觉仍可容忍。

  * 3）失望的 Frustrated

这代表响应时间超过F秒，用户难以接受，放弃继续使用，用户感觉失望。

其它的协议有各自类似的度量指标，比如：

SIP 就有：

* SRD (Session Request Delay) 会话请求延迟
* SDD (Session Disconnect Delay) 会话断开延迟
* SDT (Session Duration Time) 会话持续时间
* SER (Session Establishment Ratio) 会话建立比率
* SEER (Session Establishment Effectiveness Ratio) 会话建立有效率
* ISAs (Ineffective Session Attempts) 无效会话尝试数
* SCR (Session Completion Ratio) 会话完成率

RTP 协议有延时（RTT）、丢包(Packet Loss) 和 抖动 (jitter)。限于篇幅，不作一一赘述。

2. 系统层面的考量
-----------------------------------------
当系统的压力越来越大，相关的资源能否能满足要求？

我们需要考察如下指标：

* CPU 利用率

* 内存 利用率

* 磁盘剩余空间

* 磁盘 I/O

* 网络 I/O

* 如何是Java 应用，还要观察 JVM 虚拟机统计指标

 - 堆内存占用
 - 垃圾回收时间和频率


3. 应用层面的考量
-----------------------------------------
对于应用本身来说，我们重点要考量应用的 "USE"， 来得出整个应用的性能度量。 "USE" 方法由
Brendan Gregg 在他的 <<性能之巅>>(System Performance: Enterprise and the Cloud) 一书中提出，即重点考量 "Usage 使用量"， "Saturation 饱和度" 和 "Error 错误率"

* Usage 使用量: 这个大家都明白，主要是在时间和空间维度上系统所承载的使用量，一般通过单个进程或集群的每秒请求数 RPS(Request Per Second) 来度量，也有类似的指标
    - 每秒查询数 QPS(Query Per Second),
    - 每秒呼叫数 CPS(Call Per Second),
    - 每秒事务数 TPS(Transaction Per Second)

* Saturation 饱和度, 这点不易理解，其定义是随着使用量的增加，对于资源的请求超过其能处理容量的程序，最常用的度量指标是请求的排队等待时间，例如线程池中在队列中等待的任务数，任务等待的时间(最大，最小，百分位)

* Error 错误率：这也很好理解，主要是指在给定使用量和资源之下的错误比率和类型


解决问题：如何做性能测试
===========================

性能测试怎么做？ 什么性能测试工具最称手？仁者见仁，智者见智。


性能测试步骤
---------------------------
套用管理学上有句的"PDCA" , 首先我们要明确了我们根据用户需要所制定的性能目标，然后按照如下的流程

.. figure:: https://upload-images.jianshu.io/upload_images/1598924-d76c405dbc6fcda4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720
    :align: center

* 1. Plan 计划你的性能测试方案
* 2. Do 执行性能测试
* 3. Check 检查测试结果和相关的各种度量指标，针对可能的性能问题进行分析研究
* 4. Action 根据检查和分析结果，采取措施进行有针对性的优化，并重新回到步骤 1， 计划下一轮的性能测试，直到结果满意，达到预定目标为止。

性能测试分类
---------------------------
而通常我们说的性能测试其实包含下列四种测试类型：

.. list-table:: 性能测试分类
   :widths: 10 10 20 20 20 20
   :header-rows: 1

   * - #
     - 分类
     - 输出
     - 方法
     - 时长
     - 说明
   * - 1
     - 基准测试
     - 系统响应响应时间和返回值
     - 通过逐个调用 API 接口来分别测试服务的基准性能
     - N 分钟 (N < 60)
     - 找到系统空闲时的基本性能指标
   * - 2
     - 容量测试
     - * 响应时间
       * 系统使用量(RPS)
       * 成功/错误率
       * 系统资源使用情况 (cpu, 内存, 磁盘空间，磁盘和网络的输入输出等指标)
       * 应用服务和业务的其他关键指标
     - 通过梯度加压减压进行大量并发请求测试
     - N 分钟 (N < 60)
     - 随着使用量的增长，找到响应时间和成功率的拐点
   * - 3
     - 压力测试
     - * 响应时间
       * 系统使用量(RPS)
       * 成功/错误率
       * 系统资源使用情况 (cpu, 内存, 磁盘空间，磁盘和网络的输入输出等指标)
       * 应用服务和业务的其他关键指标
     - 施加急剧增长的负载请求，以进行海量的并发请求测试
     - N 小时 (N < 3)
     -  随着使用量的增长，分析响应时间和成功率的变化趋势，找到系统最大的承受负载
   * - 4
     - 稳定性测试
     - * 响应时间
       * 系统使用量(RPS)
       * 成功/错误率
       * 系统资源使用情况 (cpu, 内存, 磁盘空间，磁盘和网络的输入输出等指标)
       * 应用服务和业务的其他关键指标
     - 通过不断的梯度加压和减压进行大量并发请求测试
     - N 小时 (N > 24)
     - 随着使用量的增长，找到响应时间和成功率的拐点




性能测试工具
-----------------------------------------
性能测试工具林林总总，有开源免费的，也有商业收费的，

.. list-table:: 性能测试工具
   :widths: 10 10 20 20 20 20
   :header-rows: 1

   * - #
     - 名称
     - 来源
     - 许可
     - 目标应用
     - 功能
   * - 1
     - Load Runner
     - HP 公司
     - 商业软件
     - Web 应用，数据库应用等
     - 性能测试的老牌工具，模拟负载和数据分析的功能强大
   * - 2
     - Jmeter
     - Apache 旗下的开源软件
     - Apache License 免费开源
     - Web 应用，数据库应用等
     - 功能全，插件多，应用广，支持录制和脚本，既有命令行，也有图形界面，是开源界的性能测试利器
   * - 3
     - Locust
     - 开源软件
     - MIT License 免费开源
     - 各种 API 接口的服务性能测试
     - 功能强大，以写 python 代码来做各种性能测试，最符合程序的思维习惯

还有很多测试工具，比如SIP 应用中常用的 SIPp, Apache Web 服务器附带的 ApacheBench, 就不一一列举了.

个人针对REST 微服务的性能测试以前都使用 JMeter, 近来转向 Locust ，其中原由请参见后续的实践环节
